## Project Context: Core Services Architectural Review

This document summarizes the architectural review of four interconnected microservices and establishes a shared context for future work.

### 1. Project Goal & Scope

The project consists of four core backend services designed to work together as a cohesive, robust, and maintainable system. The services reviewed are:

1.  `authentication-service`
2.  `account-management-service`
3.  `user-management-service`
4.  `authorization-service`

**Conclusion**: All four services are perfectly aligned, consistent, and serve as excellent companions to each other, successfully forming a unified microservices ecosystem.

---

### 2. Shared Architectural Blueprint

All services are built upon a standardized architectural blueprint, ensuring uniformity and reducing developer cognitive load.

*   **Core Architecture**: Clean Architecture
    *   `src/api`: API layer (Controllers, Routes, DTOs, Middlewares).
    *   `src/application`: Business logic (Services, Use Cases, Interfaces).
    *   `src/domain`: Core entities, value objects, and domain exceptions.
    *   `src/infrastructure`: External implementations (DB clients, 3rd-party adapters, config).

*   **Core Technology Stack**:
    *   **Platform**: Node.js with TypeScript
    *   **Framework**: Express.js
    *   **Dependency Injection**: `tsyringe`
    *   **Logging**: `winston` (for structured, contextual logging)
    *   **Testing**: `jest`
    *   **Resilience**: `opossum` (for circuit breakers)

*   **Key Guiding Principles**:
    1.  **Interface-Driven Design**: All core components are abstracted behind interfaces.
    2.  **Centralized Error Handling**: A global middleware provides consistent error responses.
    3.  **Resilience by Default**: Critical external calls are wrapped in a circuit breaker.
    4.  **Configuration as Code**: Environment-based configuration is managed via a dedicated service.
    5.  **Security First**: Endpoints are protected via authentication and authorization middleware.

---

### 3. Next Steps

A `roadmap.md` file has been created, outlining a phased, dependency-based deployment and beta testing strategy using Docker for all four services. This plan ensures a stable and logical rollout, starting with foundational services and progressing to feature services.

---

### 4. Rego Integration Summary

The `authorization-service` has been refactored to use Rego for policy decisions, replacing the previous CASL-based implementation. The key changes are:

*   **Introduced a Rego Engine**: An `IRegoEngine` interface and an `OpaVsixEngine` implementation were added to evaluate Rego policies.
*   **Refactored AuthorizationService**: The `AuthorizationService` now uses the `RegoEngine` to make authorization decisions.
*   **Updated Policy Entity**: The `Policy` entity was updated to store Rego policy strings.
*   **Removed CASL**: The CASL-related files and logic were removed or commented out.